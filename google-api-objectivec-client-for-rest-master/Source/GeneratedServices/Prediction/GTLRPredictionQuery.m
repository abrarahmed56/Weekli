// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Prediction API (prediction/v1.6)
// Description:
//   Lets you access a cloud hosted machine learning service that makes it easy
//   to build smart apps
// Documentation:
//   https://developers.google.com/prediction/docs/developer-guide

#import "GTLRPredictionQuery.h"

#import "GTLRPredictionObjects.h"

@implementation GTLRPredictionQuery

@dynamic fields;

@end

@implementation GTLRPredictionQuery_HostedmodelsPredict

@dynamic hostedModelName, project;

+ (instancetype)queryWithObject:(GTLRPrediction_Input *)object
                        project:(NSString *)project
                hostedModelName:(NSString *)hostedModelName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"hostedModelName", @"project"
  ];
  NSString *pathURITemplate = @"{project}/hostedmodels/{hostedModelName}/predict";
  GTLRPredictionQuery_HostedmodelsPredict *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.hostedModelName = hostedModelName;
  query.expectedObjectClass = [GTLRPrediction_Output class];
  query.loggingName = @"prediction.hostedmodels.predict";
  return query;
}

@end

@implementation GTLRPredictionQuery_TrainedmodelsAnalyze

@dynamic identifier, project;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProject:(NSString *)project
                      identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"project"
  ];
  NSString *pathURITemplate = @"{project}/trainedmodels/{id}/analyze";
  GTLRPredictionQuery_TrainedmodelsAnalyze *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRPrediction_Analyze class];
  query.loggingName = @"prediction.trainedmodels.analyze";
  return query;
}

@end

@implementation GTLRPredictionQuery_TrainedmodelsDelete

@dynamic identifier, project;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProject:(NSString *)project
                      identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"project"
  ];
  NSString *pathURITemplate = @"{project}/trainedmodels/{id}";
  GTLRPredictionQuery_TrainedmodelsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.identifier = identifier;
  query.loggingName = @"prediction.trainedmodels.delete";
  return query;
}

@end

@implementation GTLRPredictionQuery_TrainedmodelsGet

@dynamic identifier, project;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProject:(NSString *)project
                      identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"project"
  ];
  NSString *pathURITemplate = @"{project}/trainedmodels/{id}";
  GTLRPredictionQuery_TrainedmodelsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRPrediction_Insert2 class];
  query.loggingName = @"prediction.trainedmodels.get";
  return query;
}

@end

@implementation GTLRPredictionQuery_TrainedmodelsInsert

@dynamic project;

+ (instancetype)queryWithObject:(GTLRPrediction_Insert *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/trainedmodels";
  GTLRPredictionQuery_TrainedmodelsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRPrediction_Insert2 class];
  query.loggingName = @"prediction.trainedmodels.insert";
  return query;
}

@end

@implementation GTLRPredictionQuery_TrainedmodelsList

@dynamic maxResults, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/trainedmodels/list";
  GTLRPredictionQuery_TrainedmodelsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRPrediction_List class];
  query.loggingName = @"prediction.trainedmodels.list";
  return query;
}

@end

@implementation GTLRPredictionQuery_TrainedmodelsPredict

@dynamic identifier, project;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRPrediction_Input *)object
                        project:(NSString *)project
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"id", @"project"
  ];
  NSString *pathURITemplate = @"{project}/trainedmodels/{id}/predict";
  GTLRPredictionQuery_TrainedmodelsPredict *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRPrediction_Output class];
  query.loggingName = @"prediction.trainedmodels.predict";
  return query;
}

@end

@implementation GTLRPredictionQuery_TrainedmodelsUpdate

@dynamic identifier, project;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRPrediction_Update *)object
                        project:(NSString *)project
                     identifier:(NSString *)identifier {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"id", @"project"
  ];
  NSString *pathURITemplate = @"{project}/trainedmodels/{id}";
  GTLRPredictionQuery_TrainedmodelsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRPrediction_Insert2 class];
  query.loggingName = @"prediction.trainedmodels.update";
  return query;
}

@end
