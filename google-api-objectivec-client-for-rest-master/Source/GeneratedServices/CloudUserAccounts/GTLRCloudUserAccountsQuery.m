// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud User Accounts API (clouduseraccounts/vm_alpha)
// Description:
//   Creates and manages users and groups for accessing Google Compute Engine
//   virtual machines.
// Documentation:
//   https://cloud.google.com/compute/docs/access/user-accounts/api/latest/

#import "GTLRCloudUserAccountsQuery.h"

#import "GTLRCloudUserAccountsObjects.h"

@implementation GTLRCloudUserAccountsQuery

@dynamic fields;

@end

@implementation GTLRCloudUserAccountsQuery_GlobalAccountsOperationsDelete

@dynamic operation, project;

+ (instancetype)queryWithProject:(NSString *)project
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/operations/{operation}";
  GTLRCloudUserAccountsQuery_GlobalAccountsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.operation = operation;
  query.loggingName = @"clouduseraccounts.globalAccountsOperations.delete";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GlobalAccountsOperationsGet

@dynamic operation, project;

+ (instancetype)queryWithProject:(NSString *)project
                       operation:(NSString *)operation {
  NSArray *pathParams = @[
    @"operation", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/operations/{operation}";
  GTLRCloudUserAccountsQuery_GlobalAccountsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.operation = operation;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Operation class];
  query.loggingName = @"clouduseraccounts.globalAccountsOperations.get";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GlobalAccountsOperationsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/operations";
  GTLRCloudUserAccountsQuery_GlobalAccountsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCloudUserAccounts_OperationList class];
  query.loggingName = @"clouduseraccounts.globalAccountsOperations.list";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GroupsAddMember

@dynamic groupName, project;

+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_GroupsAddMemberRequest *)object
                        project:(NSString *)project
                      groupName:(NSString *)groupName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"groupName", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/groups/{groupName}/addMember";
  GTLRCloudUserAccountsQuery_GroupsAddMember *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.groupName = groupName;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Operation class];
  query.loggingName = @"clouduseraccounts.groups.addMember";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GroupsDelete

@dynamic groupName, project;

+ (instancetype)queryWithProject:(NSString *)project
                       groupName:(NSString *)groupName {
  NSArray *pathParams = @[
    @"groupName", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/groups/{groupName}";
  GTLRCloudUserAccountsQuery_GroupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.groupName = groupName;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Operation class];
  query.loggingName = @"clouduseraccounts.groups.delete";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GroupsGet

@dynamic groupName, project;

+ (instancetype)queryWithProject:(NSString *)project
                       groupName:(NSString *)groupName {
  NSArray *pathParams = @[
    @"groupName", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/groups/{groupName}";
  GTLRCloudUserAccountsQuery_GroupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.groupName = groupName;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Group class];
  query.loggingName = @"clouduseraccounts.groups.get";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GroupsGetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithProject:(NSString *)project
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/groups/{resource}/getIamPolicy";
  GTLRCloudUserAccountsQuery_GroupsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Policy class];
  query.loggingName = @"clouduseraccounts.groups.getIamPolicy";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GroupsInsert

@dynamic project;

+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_Group *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/groups";
  GTLRCloudUserAccountsQuery_GroupsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Operation class];
  query.loggingName = @"clouduseraccounts.groups.insert";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GroupsList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/groups";
  GTLRCloudUserAccountsQuery_GroupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCloudUserAccounts_GroupList class];
  query.loggingName = @"clouduseraccounts.groups.list";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GroupsRemoveMember

@dynamic groupName, project;

+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_GroupsRemoveMemberRequest *)object
                        project:(NSString *)project
                      groupName:(NSString *)groupName {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"groupName", @"project"
  ];
  NSString *pathURITemplate = @"{project}/global/groups/{groupName}/removeMember";
  GTLRCloudUserAccountsQuery_GroupsRemoveMember *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.groupName = groupName;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Operation class];
  query.loggingName = @"clouduseraccounts.groups.removeMember";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GroupsSetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_Policy *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/groups/{resource}/setIamPolicy";
  GTLRCloudUserAccountsQuery_GroupsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Policy class];
  query.loggingName = @"clouduseraccounts.groups.setIamPolicy";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_GroupsTestIamPermissions

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_TestPermissionsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/groups/{resource}/testIamPermissions";
  GTLRCloudUserAccountsQuery_GroupsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudUserAccounts_TestPermissionsResponse class];
  query.loggingName = @"clouduseraccounts.groups.testIamPermissions";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_LinuxGetAuthorizedKeysView

@dynamic instance, login, project, user, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                            user:(NSString *)user
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"project", @"user", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/authorizedKeysView/{user}";
  GTLRCloudUserAccountsQuery_LinuxGetAuthorizedKeysView *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.user = user;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCloudUserAccounts_LinuxGetAuthorizedKeysViewResponse class];
  query.loggingName = @"clouduseraccounts.linux.getAuthorizedKeysView";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_LinuxGetLinuxAccountViews

@dynamic filter, instance, maxResults, orderBy, pageToken, project,
         zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (instancetype)queryWithProject:(NSString *)project
                    zoneProperty:(NSString *)zoneProperty
                        instance:(NSString *)instance {
  NSArray *pathParams = @[
    @"project", @"zone"
  ];
  NSString *pathURITemplate = @"{project}/zones/{zone}/linuxAccountViews";
  GTLRCloudUserAccountsQuery_LinuxGetLinuxAccountViews *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.zoneProperty = zoneProperty;
  query.instance = instance;
  query.expectedObjectClass = [GTLRCloudUserAccounts_LinuxGetLinuxAccountViewsResponse class];
  query.loggingName = @"clouduseraccounts.linux.getLinuxAccountViews";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_UsersAddPublicKey

@dynamic project, user;

+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_PublicKey *)object
                        project:(NSString *)project
                           user:(NSString *)user {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"user"
  ];
  NSString *pathURITemplate = @"{project}/global/users/{user}/addPublicKey";
  GTLRCloudUserAccountsQuery_UsersAddPublicKey *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.user = user;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Operation class];
  query.loggingName = @"clouduseraccounts.users.addPublicKey";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_UsersDelete

@dynamic project, user;

+ (instancetype)queryWithProject:(NSString *)project
                            user:(NSString *)user {
  NSArray *pathParams = @[
    @"project", @"user"
  ];
  NSString *pathURITemplate = @"{project}/global/users/{user}";
  GTLRCloudUserAccountsQuery_UsersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.user = user;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Operation class];
  query.loggingName = @"clouduseraccounts.users.delete";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_UsersGet

@dynamic project, user;

+ (instancetype)queryWithProject:(NSString *)project
                            user:(NSString *)user {
  NSArray *pathParams = @[
    @"project", @"user"
  ];
  NSString *pathURITemplate = @"{project}/global/users/{user}";
  GTLRCloudUserAccountsQuery_UsersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.user = user;
  query.expectedObjectClass = [GTLRCloudUserAccounts_User class];
  query.loggingName = @"clouduseraccounts.users.get";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_UsersGetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithProject:(NSString *)project
                        resource:(NSString *)resource {
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/users/{resource}/getIamPolicy";
  GTLRCloudUserAccountsQuery_UsersGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Policy class];
  query.loggingName = @"clouduseraccounts.users.getIamPolicy";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_UsersInsert

@dynamic project;

+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_User *)object
                        project:(NSString *)project {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/users";
  GTLRCloudUserAccountsQuery_UsersInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Operation class];
  query.loggingName = @"clouduseraccounts.users.insert";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_UsersList

@dynamic filter, maxResults, orderBy, pageToken, project;

+ (instancetype)queryWithProject:(NSString *)project {
  NSArray *pathParams = @[ @"project" ];
  NSString *pathURITemplate = @"{project}/global/users";
  GTLRCloudUserAccountsQuery_UsersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.expectedObjectClass = [GTLRCloudUserAccounts_UserList class];
  query.loggingName = @"clouduseraccounts.users.list";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_UsersRemovePublicKey

@dynamic fingerprint, project, user;

+ (instancetype)queryWithProject:(NSString *)project
                            user:(NSString *)user
                     fingerprint:(NSString *)fingerprint {
  NSArray *pathParams = @[
    @"project", @"user"
  ];
  NSString *pathURITemplate = @"{project}/global/users/{user}/removePublicKey";
  GTLRCloudUserAccountsQuery_UsersRemovePublicKey *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.user = user;
  query.fingerprint = fingerprint;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Operation class];
  query.loggingName = @"clouduseraccounts.users.removePublicKey";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_UsersSetIamPolicy

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_Policy *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/users/{resource}/setIamPolicy";
  GTLRCloudUserAccountsQuery_UsersSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudUserAccounts_Policy class];
  query.loggingName = @"clouduseraccounts.users.setIamPolicy";
  return query;
}

@end

@implementation GTLRCloudUserAccountsQuery_UsersTestIamPermissions

@dynamic project, resource;

+ (instancetype)queryWithObject:(GTLRCloudUserAccounts_TestPermissionsRequest *)object
                        project:(NSString *)project
                       resource:(NSString *)resource {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"resource"
  ];
  NSString *pathURITemplate = @"{project}/global/users/{resource}/testIamPermissions";
  GTLRCloudUserAccountsQuery_UsersTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudUserAccounts_TestPermissionsResponse class];
  query.loggingName = @"clouduseraccounts.users.testIamPermissions";
  return query;
}

@end
