// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   TaskQueue API (taskqueue/v1beta2)
// Description:
//   Accesses a Google App Engine Pull Task Queue over REST.
// Documentation:
//   https://developers.google.com/appengine/docs/python/taskqueue/rest

#import "GTLRTaskqueueQuery.h"

#import "GTLRTaskqueueObjects.h"

@implementation GTLRTaskqueueQuery

@dynamic fields;

@end

@implementation GTLRTaskqueueQuery_TaskqueuesGet

@dynamic getStats, project, taskqueue;

+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue {
  NSArray *pathParams = @[
    @"project", @"taskqueue"
  ];
  NSString *pathURITemplate = @"{project}/taskqueues/{taskqueue}";
  GTLRTaskqueueQuery_TaskqueuesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.taskqueue = taskqueue;
  query.expectedObjectClass = [GTLRTaskqueue_TaskQueue class];
  query.loggingName = @"taskqueue.taskqueues.get";
  return query;
}

@end

@implementation GTLRTaskqueueQuery_TasksDelete

@dynamic project, task, taskqueue;

+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue
                            task:(NSString *)task {
  NSArray *pathParams = @[
    @"project", @"task", @"taskqueue"
  ];
  NSString *pathURITemplate = @"{project}/taskqueues/{taskqueue}/tasks/{task}";
  GTLRTaskqueueQuery_TasksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.project = project;
  query.taskqueue = taskqueue;
  query.task = task;
  query.loggingName = @"taskqueue.tasks.delete";
  return query;
}

@end

@implementation GTLRTaskqueueQuery_TasksGet

@dynamic project, task, taskqueue;

+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue
                            task:(NSString *)task {
  NSArray *pathParams = @[
    @"project", @"task", @"taskqueue"
  ];
  NSString *pathURITemplate = @"{project}/taskqueues/{taskqueue}/tasks/{task}";
  GTLRTaskqueueQuery_TasksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.taskqueue = taskqueue;
  query.task = task;
  query.expectedObjectClass = [GTLRTaskqueue_Task class];
  query.loggingName = @"taskqueue.tasks.get";
  return query;
}

@end

@implementation GTLRTaskqueueQuery_TasksInsert

@dynamic project, taskqueue;

+ (instancetype)queryWithObject:(GTLRTaskqueue_Task *)object
                        project:(NSString *)project
                      taskqueue:(NSString *)taskqueue {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"taskqueue"
  ];
  NSString *pathURITemplate = @"{project}/taskqueues/{taskqueue}/tasks";
  GTLRTaskqueueQuery_TasksInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.taskqueue = taskqueue;
  query.expectedObjectClass = [GTLRTaskqueue_Task class];
  query.loggingName = @"taskqueue.tasks.insert";
  return query;
}

@end

@implementation GTLRTaskqueueQuery_TasksLease

@dynamic groupByTag, leaseSecs, numTasks, project, tag, taskqueue;

+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue
                        numTasks:(NSInteger)numTasks
                       leaseSecs:(NSInteger)leaseSecs {
  NSArray *pathParams = @[
    @"project", @"taskqueue"
  ];
  NSString *pathURITemplate = @"{project}/taskqueues/{taskqueue}/tasks/lease";
  GTLRTaskqueueQuery_TasksLease *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.project = project;
  query.taskqueue = taskqueue;
  query.numTasks = numTasks;
  query.leaseSecs = leaseSecs;
  query.expectedObjectClass = [GTLRTaskqueue_Tasks class];
  query.loggingName = @"taskqueue.tasks.lease";
  return query;
}

@end

@implementation GTLRTaskqueueQuery_TasksList

@dynamic project, taskqueue;

+ (instancetype)queryWithProject:(NSString *)project
                       taskqueue:(NSString *)taskqueue {
  NSArray *pathParams = @[
    @"project", @"taskqueue"
  ];
  NSString *pathURITemplate = @"{project}/taskqueues/{taskqueue}/tasks";
  GTLRTaskqueueQuery_TasksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.project = project;
  query.taskqueue = taskqueue;
  query.expectedObjectClass = [GTLRTaskqueue_Tasks2 class];
  query.loggingName = @"taskqueue.tasks.list";
  return query;
}

@end

@implementation GTLRTaskqueueQuery_TasksPatch

@dynamic newLeaseSeconds, project, task, taskqueue;

+ (instancetype)queryWithObject:(GTLRTaskqueue_Task *)object
                        project:(NSString *)project
                      taskqueue:(NSString *)taskqueue
                           task:(NSString *)task
                newLeaseSeconds:(NSInteger)newLeaseSeconds {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"task", @"taskqueue"
  ];
  NSString *pathURITemplate = @"{project}/taskqueues/{taskqueue}/tasks/{task}";
  GTLRTaskqueueQuery_TasksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.taskqueue = taskqueue;
  query.task = task;
  query.newLeaseSeconds = newLeaseSeconds;
  query.expectedObjectClass = [GTLRTaskqueue_Task class];
  query.loggingName = @"taskqueue.tasks.patch";
  return query;
}

@end

@implementation GTLRTaskqueueQuery_TasksUpdate

@dynamic newLeaseSeconds, project, task, taskqueue;

+ (instancetype)queryWithObject:(GTLRTaskqueue_Task *)object
                        project:(NSString *)project
                      taskqueue:(NSString *)taskqueue
                           task:(NSString *)task
                newLeaseSeconds:(NSInteger)newLeaseSeconds {
  if (object == nil) {
    GTLR_DEBUG_ASSERT(object != nil, @"Got a nil object");
    return nil;
  }
  NSArray *pathParams = @[
    @"project", @"task", @"taskqueue"
  ];
  NSString *pathURITemplate = @"{project}/taskqueues/{taskqueue}/tasks/{task}";
  GTLRTaskqueueQuery_TasksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.project = project;
  query.taskqueue = taskqueue;
  query.task = task;
  query.newLeaseSeconds = newLeaseSeconds;
  query.expectedObjectClass = [GTLRTaskqueue_Task class];
  query.loggingName = @"taskqueue.tasks.update";
  return query;
}

@end
